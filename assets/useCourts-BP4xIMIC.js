import{e as v,p as G,u as h}from"./index-C1WcVVas.js";const T=.6,P=.4;function J(p,l,i){return i===l?0:(p-l)/(i-l)}function x(p,l){const i=[],r=[...p];for(let o=0;o<l&&r.length>0;o++){const e=r.reduce((u,m)=>u+m.finalWeight,0);let a=Math.random()*e,t=0;for(let u=0;u<r.length;u++)if(a-=r[u].finalWeight,a<=0){t=u;break}i.push(r[t]),r.splice(t,1)}return i}function W(p,l,i=2,r=50){const o=Date.now(),e=p.filter(n=>n.status==="idle").map(n=>({...n,finalWeight:0})),a=4,t=Math.min(l,Math.floor(e.length/a));if(t===0)return[];const u=e.map(n=>n.lastPlayedAt?o-n.lastPlayedAt:Number.MAX_SAFE_INTEGER),m=Math.min(...u.filter(n=>isFinite(n))),y=Math.max(...u.filter(n=>isFinite(n)));e.forEach(n=>{const d=n.lastPlayedAt?o-n.lastPlayedAt:Number.MAX_SAFE_INTEGER,C=isFinite(d)?J(d,m,y):1,M=1/(n["played-times"]+1);n.finalWeight=T*C+P*M});const A=x(e,t*a),c=Array.from({length:t},()=>({members:[]}));A.forEach((n,d)=>{c[d%t].members.push(n)});let s=0;for(;s<r&&!(c.length<=1);){const n=c.map(f=>f.members.reduce((S,w)=>S+w.level,0)/(f.members.length||1)),d=Math.max(...n),C=Math.min(...n);if(d-C<=i)break;const M=n.indexOf(d),O=n.indexOf(C),b=c[M],I=c[O];if(!b||!I)break;const N=b.members.reduce((f,S)=>f.level>S.level?f:S),E=I.members.reduce((f,S)=>f.level<S.level?f:S);if(N&&E&&N.id!==E.id)b.members=b.members.filter(f=>f.id!==N.id).concat(E),I.members=I.members.filter(f=>f.id!==E.id).concat(N);else break;s++}return c.map(n=>{const d=[...n.members];if(d.length!==a)return{teamA:[],teamB:[]};d.sort((O,b)=>b.level-O.level);const C=[d[0],d[3]],M=[d[1],d[2]];return{teamA:C,teamB:M}}).filter(n=>n.teamA.length>0)}const F=v()(G(p=>({courts:[],addCourt:()=>{p(l=>{const i={id:l.courts.length>0?Math.max(...l.courts.map(r=>r.id))+1:1,name:`場地 ${String.fromCharCode(65+l.courts.length)}`,status:"idle",players:[null,null,null,null]};return{courts:[...l.courts,i]}})},removeCourt:l=>{const{updateMembersStatus:i}=h.getState();p(r=>{const o=r.courts.find(t=>t.id===l);if(o){const t=o.players.filter(u=>u!==null).map(u=>u.id);t.length>0&&i(t,"idle")}return{courts:r.courts.filter(t=>t.id!==l).map((t,u)=>({...t,name:`場地 ${String.fromCharCode(65+u)}`}))}})},removePlayer:(l,i)=>{p(r=>{const o=JSON.parse(JSON.stringify(r.courts)),e=o[l];return e.players[i]=null,e.players.filter(t=>t!==null).length===0?e.status="idle":e.status="waiting",{courts:o}})},selectPlayer:(l,i,r)=>{p(o=>{const e=JSON.parse(JSON.stringify(o.courts)),a=e[l];return a.players[i]=r,a.status==="idle"&&(a.status="waiting"),{courts:e}})},randomGrouping:l=>{const{members:i,updateMembersStatus:r}=h.getState();p(o=>{const e=JSON.parse(JSON.stringify(o.courts)),a=e[l],t=a.players.filter(c=>c!==null).map(c=>c.id);t.length>0&&r(t,"idle");const m=e.filter((c,s)=>s!==l).flatMap(c=>c.players).filter(c=>c!==null).map(c=>c.id),y=i.filter(c=>c.status==="idle"&&!m.includes(c.id)),A=W(y,1);if(A.length>0){const{teamA:c,teamB:s}=A[0];a.players=[c[0],c[1],s[0],s[1]],a.status="waiting"}else a.players=[null,null,null,null],a.status="idle";return{courts:e}})},fillIncompleteCourts:()=>{const{members:l}=h.getState();p(i=>{const r=JSON.parse(JSON.stringify(i.courts)),o=r.flatMap(s=>s.players).filter(s=>s!==null).map(s=>s.id),e=l.filter(s=>s.status==="idle"&&!o.includes(s.id)).map(s=>({...s,finalWeight:0}));if(e.length===0)return{courts:r};const a=Date.now(),t=e.map(s=>s.lastPlayedAt?a-s.lastPlayedAt:Number.MAX_SAFE_INTEGER),u=Math.min(...t.filter(s=>isFinite(s))),m=Math.max(...t.filter(s=>isFinite(s)));e.forEach(s=>{const g=s.lastPlayedAt?a-s.lastPlayedAt:Number.MAX_SAFE_INTEGER,n=isFinite(g)?J(g,u,m):1,d=1/(s["played-times"]+1);s.finalWeight=T*n+P*d});const y=[];return r.forEach((s,g)=>{s.players.filter(n=>n!==null).length<4&&s.players.forEach((n,d)=>{n===null&&y.push({courtIndex:g,playerIndex:d})})}),y.length===0?{courts:r}:(x(e,y.length).forEach((s,g)=>{const n=y[g];n&&(r[n.courtIndex].players[n.playerIndex]=s)}),[...new Set(y.map(s=>s.courtIndex))].forEach(s=>{const g=r[s];g.players.filter(d=>d!==null).length>0&&(g.status="waiting")}),{courts:r})})},startGame:l=>{const{updateMembersStatus:i}=h.getState();p(r=>{const o=JSON.parse(JSON.stringify(r.courts)),e=o[l];if(e.players.filter(t=>t!==null).length===4){e.status="playing";const t=e.players.map(u=>u.id);i(t,"playing")}return{courts:o}})},pauseGame:l=>{const{updateMembersStatus:i}=h.getState();p(r=>{const o=JSON.parse(JSON.stringify(r.courts)),e=o[l];if(e.status==="playing"){e.status="waiting";const a=e.players.filter(t=>t!==null).map(t=>t.id);i(a,"idle")}return{courts:o}})},endGame:l=>{const{incrementPlayedTimes:i,updateMembersStatus:r,updateLastPlayedAt:o}=h.getState();p(e=>{const a=JSON.parse(JSON.stringify(e.courts)),t=a[l],u=t.players.filter(m=>m!==null).map(m=>m.id);return u.length>0&&(i(u),r(u,"idle"),o(u)),t.players=[null,null,null,null],t.status="idle",{courts:a}})},startAllReadyCourts:()=>{const{updateMembersStatus:l}=h.getState();p(i=>{const r=JSON.parse(JSON.stringify(i.courts)),o=[];return r.forEach(e=>{const a=e.players.filter(t=>t!==null).length;if(e.status==="waiting"&&a===4){e.status="playing";const t=e.players.map(u=>u.id);o.push(...t)}}),o.length>0&&l(o,"playing"),{courts:r}})},endAllPlayingCourts:()=>{const{incrementPlayedTimes:l,updateMembersStatus:i,updateLastPlayedAt:r}=h.getState();p(o=>{const e=JSON.parse(JSON.stringify(o.courts)),a=[];return e.forEach(t=>{if(t.status==="playing"){const u=t.players.filter(m=>m!==null).map(m=>m.id);a.push(...u),t.players=[null,null,null,null],t.status="idle"}}),a.length>0&&(l(a),i(a,"idle"),r(a)),{courts:e}})}}),{name:"courts-storage"}));export{F as u};
