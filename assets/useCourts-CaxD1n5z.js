import{c as T}from"./index-Chbt03rQ.js";import{e as G,p as W,u as h}from"./index-iVXrX644.js";/**
 * @license lucide-react v0.544.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const F=[["path",{d:"M5 5a2 2 0 0 1 3.008-1.728l11.997 6.998a2 2 0 0 1 .003 3.458l-12 7A2 2 0 0 1 5 19z",key:"10ikf1"}]],z=T("play",F);/**
 * @license lucide-react v0.544.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const k=[["rect",{width:"18",height:"18",x:"3",y:"3",rx:"2",key:"afitv7"}]],D=T("square",k),w=.6,x=.4;function J(p,r,o){return o===r?0:(p-r)/(o-r)}function _(p,r){const o=[],n=[...p];for(let i=0;i<r&&n.length>0;i++){const e=n.reduce((u,m)=>u+m.finalWeight,0);let a=Math.random()*e,t=0;for(let u=0;u<n.length;u++)if(a-=n[u].finalWeight,a<=0){t=u;break}o.push(n[t]),n.splice(t,1)}return o}function R(p,r,o=2,n=50){const i=Date.now(),e=p.filter(l=>l.status==="idle").map(l=>({...l,finalWeight:0})),a=4,t=Math.min(r,Math.floor(e.length/a));if(t===0)return[];const u=e.map(l=>l.lastPlayedAt?i-l.lastPlayedAt:Number.MAX_SAFE_INTEGER),m=Math.min(...u.filter(l=>isFinite(l))),g=Math.max(...u.filter(l=>isFinite(l)));e.forEach(l=>{const d=l.lastPlayedAt?i-l.lastPlayedAt:Number.MAX_SAFE_INTEGER,C=isFinite(d)?J(d,m,g):1,N=1/(l["played-times"]+1);l.finalWeight=w*C+x*N});const A=_(e,t*a),c=Array.from({length:t},()=>({members:[]}));A.forEach((l,d)=>{c[d%t].members.push(l)});let s=0;for(;s<n&&!(c.length<=1);){const l=c.map(f=>f.members.reduce((S,v)=>S+v.level,0)/(f.members.length||1)),d=Math.max(...l),C=Math.min(...l);if(d-C<=o)break;const N=l.indexOf(d),P=l.indexOf(C),b=c[N],I=c[P];if(!b||!I)break;const E=b.members.reduce((f,S)=>f.level>S.level?f:S),O=I.members.reduce((f,S)=>f.level<S.level?f:S);if(E&&O&&E.id!==O.id)b.members=b.members.filter(f=>f.id!==E.id).concat(O),I.members=I.members.filter(f=>f.id!==O.id).concat(E);else break;s++}return c.map(l=>{const d=[...l.members];if(d.length!==a)return{teamA:[],teamB:[]};d.sort((P,b)=>b.level-P.level);const C=[d[0],d[3]],N=[d[1],d[2]];return{teamA:C,teamB:N}}).filter(l=>l.teamA.length>0)}const L=h.getState().members,M=p=>L.find(r=>r.name===p)||null,$=G()(W(p=>({courts:[{id:1,name:"場地 A",status:"waiting",players:[M("王小明"),M("李小美"),M("張大華"),M("陳小雯")]},{id:2,name:"場地 B",status:"waiting",players:[M("林志偉"),null,M("黃大成"),null]},{id:3,name:"場地 C",status:"idle",players:[null,null,null,null]},{id:4,name:"場地 D",status:"idle",players:[null,null,null,null]}],addCourt:()=>{p(r=>{const o={id:r.courts.length>0?Math.max(...r.courts.map(n=>n.id))+1:1,name:`場地 ${String.fromCharCode(65+r.courts.length)}`,status:"idle",players:[null,null,null,null]};return{courts:[...r.courts,o]}})},removeCourt:r=>{const{updateMembersStatus:o}=h.getState();p(n=>{const i=n.courts.find(t=>t.id===r);if(i){const t=i.players.filter(u=>u!==null).map(u=>u.id);t.length>0&&o(t,"idle")}return{courts:n.courts.filter(t=>t.id!==r).map((t,u)=>({...t,name:`場地 ${String.fromCharCode(65+u)}`}))}})},removePlayer:(r,o)=>{p(n=>{const i=JSON.parse(JSON.stringify(n.courts)),e=i[r];return e.players[o]=null,e.players.filter(t=>t!==null).length===0?e.status="idle":e.status="waiting",{courts:i}})},selectPlayer:(r,o,n)=>{p(i=>{const e=JSON.parse(JSON.stringify(i.courts)),a=e[r];return a.players[o]=n,a.status==="idle"&&(a.status="waiting"),{courts:e}})},randomGrouping:r=>{const{members:o,updateMembersStatus:n}=h.getState();p(i=>{const e=JSON.parse(JSON.stringify(i.courts)),a=e[r],t=a.players.filter(c=>c!==null).map(c=>c.id);t.length>0&&n(t,"idle");const m=e.filter((c,s)=>s!==r).flatMap(c=>c.players).filter(c=>c!==null).map(c=>c.id),g=o.filter(c=>c.status==="idle"&&!m.includes(c.id)),A=R(g,1);if(A.length>0){const{teamA:c,teamB:s}=A[0];a.players=[c[0],c[1],s[0],s[1]],a.status="waiting"}else a.players=[null,null,null,null],a.status="idle";return{courts:e}})},fillIncompleteCourts:()=>{const{members:r}=h.getState();p(o=>{const n=JSON.parse(JSON.stringify(o.courts)),i=n.flatMap(s=>s.players).filter(s=>s!==null).map(s=>s.id),e=r.filter(s=>s.status==="idle"&&!i.includes(s.id)).map(s=>({...s,finalWeight:0}));if(e.length===0)return{courts:n};const a=Date.now(),t=e.map(s=>s.lastPlayedAt?a-s.lastPlayedAt:Number.MAX_SAFE_INTEGER),u=Math.min(...t.filter(s=>isFinite(s))),m=Math.max(...t.filter(s=>isFinite(s)));e.forEach(s=>{const y=s.lastPlayedAt?a-s.lastPlayedAt:Number.MAX_SAFE_INTEGER,l=isFinite(y)?J(y,u,m):1,d=1/(s["played-times"]+1);s.finalWeight=w*l+x*d});const g=[];return n.forEach((s,y)=>{s.players.filter(l=>l!==null).length<4&&s.players.forEach((l,d)=>{l===null&&g.push({courtIndex:y,playerIndex:d})})}),g.length===0?{courts:n}:(_(e,g.length).forEach((s,y)=>{const l=g[y];l&&(n[l.courtIndex].players[l.playerIndex]=s)}),[...new Set(g.map(s=>s.courtIndex))].forEach(s=>{const y=n[s];y.players.filter(d=>d!==null).length>0&&(y.status="waiting")}),{courts:n})})},startGame:r=>{const{updateMembersStatus:o}=h.getState();p(n=>{const i=JSON.parse(JSON.stringify(n.courts)),e=i[r];if(e.players.filter(t=>t!==null).length===4){e.status="playing";const t=e.players.map(u=>u.id);o(t,"playing")}return{courts:i}})},pauseGame:r=>{const{updateMembersStatus:o}=h.getState();p(n=>{const i=JSON.parse(JSON.stringify(n.courts)),e=i[r];if(e.status==="playing"){e.status="waiting";const a=e.players.filter(t=>t!==null).map(t=>t.id);o(a,"idle")}return{courts:i}})},endGame:r=>{const{incrementPlayedTimes:o,updateMembersStatus:n,updateLastPlayedAt:i}=h.getState();p(e=>{const a=JSON.parse(JSON.stringify(e.courts)),t=a[r],u=t.players.filter(m=>m!==null).map(m=>m.id);return u.length>0&&(o(u),n(u,"idle"),i(u)),t.players=[null,null,null,null],t.status="idle",{courts:a}})},startAllReadyCourts:()=>{const{updateMembersStatus:r}=h.getState();p(o=>{const n=JSON.parse(JSON.stringify(o.courts)),i=[];return n.forEach(e=>{const a=e.players.filter(t=>t!==null).length;if(e.status==="waiting"&&a===4){e.status="playing";const t=e.players.map(u=>u.id);i.push(...t)}}),i.length>0&&r(i,"playing"),{courts:n}})},endAllPlayingCourts:()=>{const{incrementPlayedTimes:r,updateMembersStatus:o,updateLastPlayedAt:n}=h.getState();p(i=>{const e=JSON.parse(JSON.stringify(i.courts)),a=[];return e.forEach(t=>{if(t.status==="playing"){const u=t.players.filter(m=>m!==null).map(m=>m.id);a.push(...u),t.players=[null,null,null,null],t.status="idle"}}),a.length>0&&(r(a),o(a,"idle"),n(a)),{courts:e}})}}),{name:"courts-storage"}));export{z as P,D as S,$ as u};
